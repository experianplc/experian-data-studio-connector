<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:collibra-dgc="http://www.mulesoft.org/schema/mule/collibra-dgc" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/collibra-dgc http://www.mulesoft.org/schema/mule/collibra-dgc/current/mule-collibra-dgc.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd">
    <collibra-dgc:config name="CollibraDGC__Connection_Managament_type_strategy" username="${collibraUserName}" password="${collibraPassword}" baseApplicationUrl="${collibraUrl}" doc:name="CollibraDGC: Connection Managament type strategy"/>
    <file:connector name="File" autoDelete="false" streaming="true" validateConnections="true" doc:name="File" outputAppend="true">
    </file:connector>
    <http:request-config responseTimeout="90000" name="HTTP_Request_Configuration" host="${gatewayHost}" port="${gatewayPort}" doc:name="HTTP Request Configuration" usePersistentConnections="false">
        <http:basic-authentication username="${gatewayUsername}" password="${gatewayPassword}" preemptive="true"/>
    </http:request-config>
    <db:generic-config name="Generic_Database_Configuration" url="${databaseJdbcUrl}" driverClassName="${databaseDriverClassName}" doc:name="Generic Database Configuration"/>
    <flow name="updateRulesFlow" processingStrategy="synchronous">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="${updateRulesUpdateFrequencyInSeconds}" timeUnit="SECONDS" />
            <watermark variable="lastValidatedTime" default-expression="${updateRulesDefaultExpression}" selector="FIRST" selector-expression="#[payload[&quot;last_validated&quot;]]"/>
            <db:select config-ref="Generic_Database_Configuration" target="#[payload]" maxRows="10" fetchSize="10" doc:name="Rules Database">
				<db:parameterized-query><![CDATA[${updateRulesSqlQuery}]]></db:parameterized-query> 
			</db:select>
        </poll>
        <set-variable variableName="testRuleCategories" value="${testRuleCategories}" doc:name="Set testRuleCategories from properties"/>
        <set-variable variableName="testRuleCategories" value="#[java.util.Arrays.asList(flowVars.testRuleCategories.split(','))]" doc:name="Split Test rule Name"/>
        <set-variable variableName="communityName" value="${communityName}" doc:name="set communityName"/>
        <set-variable variableName="externalSystemId" value="${externalSystemId}" doc:name="Set externalSystemId"/>
        <logger message="Sending Pandora Rules to Collibra : #[payload]" level="INFO" doc:name="Sending has begun"/>
        <foreach counterVariableName="ruleIndex"  doc:name="For Each">
            <choice doc:name="Choice">
				<when expression="#[!flowVars.testRuleCategories.contains(payload.rule_category)]">
                    <logger message="Request successfully sent for processing rule: #[payload.get('name')]" level="INFO" doc:name="Logger"/>
                    <set-variable variableName="externalDatabaseNameRegex" value="${connectionStringExternalDatabaseRegex}" doc:name="Set regex"/>
                    <set-variable variableName="externalSchemaNameRegex" value="${connectionStringExternalSchemaRegex}" doc:name="Set regex"/>
                    <set-variable variableName="parametersRegex" value="${parametersRegex}" doc:name="Set regex"/>
                    <set-variable variableName="externalDatabaseName" value="#[if (payload.external_database == null) regex(flowVars.externalDatabaseNameRegex, payload.connection_string); else payload.external_database]" doc:name="externalDatabaseName"/>
                    <set-variable variableName="externalSchemaName" value="#[if (payload.external_schema == null) regex(flowVars.externalSchemaNameRegex, payload.connection_string); else payload.external_schema]" doc:name="externalSchemaName"/>
                    <set-variable variableName="externalColumnName" value="#[if (payload.external_column_name == null) regex(flowVars.parametersRegex, payload.description); else payload.external_column_name]" doc:name="externalColumnName"/>
                    <logger message="flow var : #[flowVars] payload: #[payload]" level="INFO" doc:name="Logger"/>
                    <dw:transform-message doc:name="Parse values from string and parameters" metadata:id="7608f222-9a00-4f9a-99b7-ed8fbc4be726">
                        <dw:input-payload  mimeType="application/java" doc:sample="sample_data\pandoraRule_1.dwl"/>
                        <dw:input-variable  mimeType="application/java" variableName="externalDatabaseNameRegex"/>
                        <dw:input-variable  mimeType="application/java" variableName="externalSchemaNameRegex"/>
                        <dw:set-variable variableName="values"><![CDATA[%dw 2.0
%output application/json
---
{	 	
	externalColumnName: payload.parameters match {
		/.*=[^\.]*?[\.]*([a-zA-Z\s]*)\s{4}.*/ -> payload.external_column_name when (payload.external_column_name != null) otherwise $[1] replace " " with "_",
		default -> payload.external_column_name
	},
	dataQualityRule: payload.description match {
		/.*DATA_QUALITY_RULE=([^;]*).*/ -> $[1],
		default -> null
	},
	dataQualityDimension: payload.description match {
		/.*DIMENSION=([^;]*).*/ -> $[1],
		default -> null
	},
	dataQualityRuleDescription: payload.description match {
		/.*DESCRIPTION=([^;]*).*/ -> $[1],
		default -> null
	}
}]]></dw:set-variable>
                    </dw:transform-message>
                    <dw:transform-message doc:name="Transform to JSON Payload">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	 "externalSystemId": flowVars.externalSystemId,
	 "communityName": flowVars.communityName,
	 "results": [{
		 "externalEntityId": flowVars.externalDatabaseName ++ "." ++ flowVars.externalSchemaName ++ "." ++ payload.external_table_name ++ "." ++ flowVars.externalColumnName ++ "." ++ payload.name,
		 "name": payload.name,
		 "dataQualityRuleName": flowVars.values.dataQualityRule,
		 "note": payload.function,
		 "dimension": flowVars.values.dataQualityDimension,	 	 
		 "description": flowVars.values.dataQualityRuleDescription, 
		 "evaluatedColumns": [{
			 "databaseName": flowVars.externalDatabaseName,
			 "schemaName": flowVars.externalSchemaName,
			 "tableName": payload.external_table_name,
			 "name": flowVars.externalColumnName
	 	 }],
	 "rowsPassed": payload.rows_passed,
	 "rowsFailed": payload.rows_failed,
	 "totalRows": payload.rows_considered,
	 "predicate": payload.parameters,
	 "qualityScore": payload.score,
	 "result": payload.result match {
	 	"Green" -> true,
	 	default -> false
	 },
	 "threshold": payload.pass_range match {	
	 	/(\d+).*/ -> $[1] as :number,
	 	default -> null
	 },
	 "customAttributes": [{
		 "typeId": "",
		 "values": [""]
	  }]	
	 }]
 }]]></dw:set-payload>
                    </dw:transform-message>
                    <set-payload value="#[[&quot;flowId&quot;: &quot;updateRules&quot;, &quot;payload&quot;: payload]]" doc:name="Set Payload"/>
                    <http:request config-ref="HTTP_Request_Configuration" path="/collibra.connect.gateway" method="POST" followRedirects="false" parseResponse="false" doc:name="HTTP" sendBodyMode="ALWAYS" >
                        <http:request-builder>
                            <http:header headerName="Content-Type" value="application/x-www-form-urlencoded"/>

                        </http:request-builder>
                    </http:request>
                </when>
                <otherwise>
                    <logger message="Rule category marked as testing." level="INFO" doc:name="Logger"/>
                </otherwise>
            </choice>
        </foreach>
    </flow>
    
        <flow name="sendPandoraAlertsFlow" processingStrategy="synchronous" doc:description="The sendPandoraAlertsFlow polls the pandora_alerts table for changes and triggers an alert in Pandora. ">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="${sendAlertsUpdateFrequencyInSeconds}" timeUnit="SECONDS" />
			<watermark variable="lastModifiedDate" default-expression="${sendAlertsDefaultExpression}" selector="FIRST" selector-expression="#[payload.last_modified_on]"/>
            <db:select config-ref="Generic_Database_Configuration" target="#[payload]" doc:name="Alerts Database">
                <db:parameterized-query><![CDATA[${sendAlertsSqlQuery}]]></db:parameterized-query>
            </db:select>
        </poll>
        <logger message="Querying for Pandora alerts: Payload: #[payload] Flow Vars: #[flowVars]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[payload != []]">
                <logger message="Variable payload: #[payload]" level="INFO" doc:name="Logger"/>
                <set-variable variableName="pandoraAlertTriggerDirectory" value="${pandoraAlertTriggerDirectory}" doc:name="Set pandoraAlertTriggerDirectory"/>
                <set-variable variableName="pandoraAlertTriggerFileName" value="${pandoraAlertTriggerFileName}" doc:name="Set pandoraAlertTriggerFileName"/>
                <set-variable variableName="useSFTP" value="${useSFTP}" doc:name="Variable"/>
                <set-payload value="  " doc:name="Set Payload"/>
                <choice doc:name="Choice">
                    <when expression="#[flowVars.useSFTP]">
                        
                        <sftp:outbound-endpoint exchange-pattern="one-way" host="${sftpHost}" port="${sftpPort}" path="${pandoraAlertTriggerDirectory}" user="${sftpUsername}" password="${sftpPassword}" responseTimeout="10000" duplicateHandling="append" doc:name="SFTP" outputPattern="${pandoraAlertTriggerFileName}"/> 
                        
                    </when>
                    <otherwise>
                        <file:outbound-endpoint path="#[flowVars.pandoraAlertTriggerDirectory]" outputPattern="#[flowVars.pandoraAlertTriggerFileName]" connector-ref="File" responseTimeout="10000" doc:name="File"/>
                    </otherwise>
                </choice>

                <logger message="Changes detected - file updated." level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="Logger" message="No changes detected -- skipping. "/>
            </otherwise>
        </choice>
    </flow>
    <flow name="sendNewRulestoDatabase" processingStrategy="synchronous" doc:description="The sendNewRulesToDatabase flow sends rules present in specified Rulebook to a database as configured. ">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="${sendNewRulesUpdateFrequencyInSeconds}" timeUnit="SECONDS" />
            <watermark variable="newLastModificationDate" default-expression="0"/>
            <collibra-dgc:list-assets config-ref="CollibraDGC__Connection_Managament_type_strategy" domainId="${rulebookDomainId}" fetchSize="10" doc:name="Get rules from Collibra"/>
        </poll>
        <choice doc:name="Choice">
            <when expression="#[payload.hasNext()]">
                <foreach collection="#[org.apache.commons.collections.IteratorUtils.toList(payload)]" doc:name="For Each">
                    <set-variable variableName="collibraRule" value="#[payload]" doc:name="Variable"/>
                    <collibra-dgc:get-user config-ref="CollibraDGC__Connection_Managament_type_strategy" userId="#[flowVars.collibraRule.lastModifiedBy]" doc:name="Get lastModifiedBy user"/>
                    <set-variable variableName="lastModifiedBy" value="#[payload.emailAddress]" doc:name="Variable"/>
                    <collibra-dgc:get-user config-ref="CollibraDGC__Connection_Managament_type_strategy" userId="#[flowVars.collibraRule.createdBy]" doc:name="Get createdBy user"/>
                    <set-variable variableName="createdBy" value="#[payload.emailAddress]" doc:name="Variable"/>
                    <logger message="Checking database for Collibra rule existence" level="INFO" doc:name="Logger"/>
                    <db:select config-ref="Generic_Database_Configuration" queryTimeout="1000" doc:name="Check if Rule is in database">
                        <db:parameterized-query><![CDATA[${checkAlertsSqlQuery}]]></db:parameterized-query>
                    </db:select>

                    <logger message="Collibra Time: #[flowVars.collibraRule.lastModificationDate] Saved Time: #[flowVars.newLastModificationDate] Payload: #[payload] Result: #[flowVars.newLastModificationDate &lt; flowVars.collibraRule.lastModificationDate &amp;&amp; payload == []] Val: #[payload.size()]" level="INFO" doc:name="Logger"/>
                    <choice doc:name="Choice">
                        <when expression="#[(flowVars.newLastModificationDate &lt; flowVars.collibraRule.lastModificationDate) and (payload.size() == 1)]">
                            <logger message="Updating rule in pandora_alerts table. #[flowVars]" level="INFO" doc:name="Update rules"/>
                            <db:update config-ref="Generic_Database_Configuration" doc:name="Update rule">
                                <db:parameterized-query><![CDATA[${updateAlertsSqlQuery}]]></db:parameterized-query>
                            </db:update>
                            <set-variable variableName="newLastModificationDate" value="#[flowVars.collibraRule.lastModificationDate]" doc:name="Set newLastModificationDate"/>
                        </when>
                        <when expression="#[(payload.size() == 0)]">
                            <logger message="Inserting rule in pandora_alerts table. #[flowVars]" level="INFO" doc:name="Insert rules"/>
                            <db:insert config-ref="Generic_Database_Configuration" doc:name="Insert Rule">
                                <db:parameterized-query><![CDATA[${insertToAlertsSqlQuery}]]></db:parameterized-query>
                            </db:insert>

                            <set-variable variableName="newLastModificationDate" value="#[flowVars.collibraRule.lastModificationDate]" doc:name="Set newLastModificationDate"/>
                        </when>
                        <otherwise>
                            <logger message="No changes found in the collibra rules #[flowVars]" level="INFO" doc:name="Logger"/>
                        </otherwise>
                    </choice>
                </foreach>
            </when>
            <otherwise>
                <logger message="No new records found or null payload" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </flow>         
</mule>
