<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:collibra-dgc="http://www.mulesoft.org/schema/mule/collibra-dgc" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/collibra-dgc http://www.mulesoft.org/schema/mule/collibra-dgc/current/mule-collibra-dgc.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
    <collibra-dgc:config name="CollibraDGC__Connection_Managament_type_strategy" username="Admin" password="Password123" baseApplicationUrl="https://experian-dev-54.collibra.com" doc:name="CollibraDGC: Connection Managament type strategy"/>
    <db:generic-config name="Generic_Database_Configuration" url="jdbc:postgresql://localhost:5432/postgres?user=postgres&amp;password=postgres" driverClassName="org.postgresql.Driver" doc:name="Generic Database Configuration"/>
    <file:connector name="File" autoDelete="false" streaming="true" validateConnections="true" doc:name="File" outputAppend="true">
    </file:connector>
    <http:request-config responseTimeout="90000" name="HTTP_Request_Configuration" host="localhost" port="8083" doc:name="HTTP Request Configuration" usePersistentConnections="false">
        <http:basic-authentication username="connect_user" password="connect_password" preemptive="true"/>
    </http:request-config>
    <flow name="updateRulesFlow" processingStrategy="synchronous">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="15" timeUnit="SECONDS" startDelay="15"/>
            <watermark variable="lastValidatedTime" default-expression="1970-01-01 00:00:00" selector="FIRST" selector-expression="#[payload[&quot;last_validated&quot;]]"/>
            <db:select config-ref="Generic_Database_Configuration" target="#[payload]" maxRows="10" fetchSize="10" doc:name="Rules Database" >
                <db:dynamic-query><![CDATA[select * from "pandora_rules"
where "last_validated" >= '#[flowVars.lastValidatedTime]'
order by "last_validated" desc]]></db:dynamic-query>
            </db:select>
        </poll>
        <set-variable variableName="testRuleCategories" value="${testRuleCategories}" doc:name="Set testRuleCategories from properties"/>
        <set-variable variableName="testRuleCategories" value="#[java.util.Arrays.asList(flowVars.testRuleCategories.split(','))]" doc:name="Split Test rule Name"/>
        <set-variable variableName="communityName" value="${communityName}" doc:name="set communityName"/>
        <set-variable variableName="externalSystemId" value="${externalSystemId}" doc:name="Set externalSystemId"/>
        <logger message="Sending Pandora Rules to Collibra" level="INFO" doc:name="Sending has begun"/>
        <foreach counterVariableName="ruleIndex" rootMessageVariableName="rules" doc:name="For Each">
            <choice doc:name="Choice">
                <when expression="#[!flowVars.testRuleCategories.contains(payload.rule_category)]">
                    <logger message="Request successfully sent for processing" level="INFO" doc:name="Logger"/>
                    <dw:transform-message doc:name="Transform to JSON Payload">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	 "externalSystemId": flowVars.externalSystemId,
	 "communityName": flowVars.communityName,
	 "results": [{
		 "externalEntityId": payload.external_database ++ "." ++ payload.external_schema ++ "." ++ payload.external_table_name ++ "." ++ payload.external_column_name,
		 "name": payload.name,
		 "dataQualityRuleName": payload.description match {
		 	/([^.]+)\.([^.]+)\.([^.]+)/ -> $[1],
		 	/([^.]+)\.([^.]+)\./ -> $[1],
		 	/([^.]+)\./ -> $[1],		 	
		 	default -> ""
		 },	
		 "note": payload.function,
		 "dimension": payload.description match {
		 	/([^.]+)\.([^.]+)\.([^.]+)/ -> $[2],
		 	/([^.]+)\.([^.]+)\./ -> $[2],		 	
		 	default -> ""
		 },	 	 
		 "description": payload.description match {
		 	/([^.]+)\.([^.]+)\.([^.]+)/ -> $[3],
		 	default -> ""
		 },	 
		 "evaluatedColumns": [{
			 "databaseName": payload.external_database,
			 "schemaName": payload.external_schema,
			 "tableName": payload.external_table_name,
			 "name": payload.external_column_name
	 	 }],
	 "rowsPassed": payload.rows_passed,
	 "rowsFailed": payload.rows_failed,
	 "qualityScore": payload.score,
	 "result": payload.result match {
	 	"Green" -> true,
	 	default -> false
	 },
	 "threshold": payload.pass_range match {	
	 	/(\d+)%/ -> $[1] as :number,
	 	default -> 0
	 },
	 "customAttributes": [{
		 "typeId": "",
		 "values": [""]
	  }]	
	 }]
 }]]></dw:set-payload>
                    </dw:transform-message>
                    <set-payload value="#[[&quot;flowId&quot;: &quot;updateRules&quot;, &quot;payload&quot;: payload]]" doc:name="Set Payload"/>
                    <http:request config-ref="HTTP_Request_Configuration" path="/collibra.connect.gateway" method="POST" followRedirects="false" parseResponse="false" doc:name="HTTP" sendBodyMode="ALWAYS" >
                        <http:request-builder>
                            <http:header headerName="Content-Type" value="application/x-www-form-urlencoded"/>

                        </http:request-builder>
                    </http:request>
                </when>
                <otherwise>
                    <logger message="Rule category marked as testing. Rule not sent for processing. " level="INFO" doc:name="Logger"/>
                </otherwise>
            </choice>
        </foreach>
    </flow>
    
        <flow name="sendPandoraAlertsFlow" processingStrategy="synchronous" doc:description="The sendPandoraAlertsFlow polls the pandora_alerts table for changes and triggers an alert in Pandora. ">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="60" timeUnit="SECONDS" startDelay="60"/>
			<watermark variable="lastModifiedDate" default-expression="&quot;1970-01-01 00:00:00&quot;" selector="FIRST" selector-expression="#[payload.last_modified_on]"/>
            <db:select config-ref="Generic_Database_Configuration" target="#[payload]" doc:name="Alerts Database">
                <db:dynamic-query><![CDATA[select last_modified_on from "pandora_alerts" 
where "last_modified_on" > '#[flowVars.lastModifiedDate]'
order by "last_modified_on" desc]]></db:dynamic-query>
            </db:select>
        </poll>
        <logger message="Querying for Pandora alerts: #[payload]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[payload != []]">
                <logger message="Variable payload: #[payload]" level="INFO" doc:name="Logger"/>
                <set-variable variableName="pandoraAlertTriggerDirectory" value="${pandoraAlertTriggerDirectory}" doc:name="Set pandoraAlertTriggerDirectory"/>
                <set-variable variableName="pandoraAlertTriggerFileName" value="${pandoraAlertTriggerFileName}" doc:name="Set pandoraAlertTriggerFileName"/>
                <file:outbound-endpoint path="#[flowVars.pandoraAlertTriggerDirectory]" outputPattern="#[flowVars.pandoraAlertTriggerFileName]" connector-ref="File" responseTimeout="10000" doc:name="File"/>
                <logger message="Changes detected - file updated." level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="Logger" message="No changes detected -- skipping. "/>
            </otherwise>
        </choice>
    </flow>
    <flow name="sendNewRulestoDatabase" doc:description="The sendNewRulesToDatabase flow sends rules present in specified Rulebook to a database as configured. ">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="60" timeUnit="SECONDS" startDelay="60"/>
            <collibra-dgc:list-assets config-ref="CollibraDGC__Connection_Managament_type_strategy" domainId="${rulebookDomainId}" doc:name="CollibraDGC"/>
        </poll>
        <logger message="Sending Collibra Rules to database" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[payload != null]">
                <foreach doc:name="For Each">
                    <scripting:component doc:name="JavaScript">
                        <scripting:script engine="JavaScript"><![CDATA[try {
	flowVars.lastModificationDate = eval("new Date(" + payload.lastModificationDate + ").toJSON()").replace(/T|\..+/g, ' ').trim();
	flowVars.creationDate = eval("new Date(" + payload.creationDate+ ").toJSON()").replace(/T|\..+/g, ' ').trim();
	flowVars.collibraRule = payload;
} catch(e) { }	]]></scripting:script>
                    </scripting:component>
                    <choice doc:name="Choice">
                        <when expression="#[flowVars.lastModificationDate != null]">
                            <logger message="Javascript payload found -- continuing." level="INFO" doc:name="Logger"/>
                            <collibra-dgc:get-user config-ref="CollibraDGC__Connection_Managament_type_strategy" userId="#[flowVars.collibraRule.lastModifiedBy]" doc:name="Get lastModifiedBy user"/>
                            <set-variable variableName="lastModifiedBy" value="#[payload.emailAddress]" doc:name="Variable"/>
                            <collibra-dgc:get-user config-ref="CollibraDGC__Connection_Managament_type_strategy" userId="#[flowVars.collibraRule.createdBy]" doc:name="Get createdBy user"/>
                            <set-variable variableName="createdBy" value="#[payload.emailAddress]" doc:name="Variable"/>
                            <logger message="Checking database for rule existence" level="INFO" doc:name="Logger"/>
                            <db:select config-ref="Generic_Database_Configuration" queryTimeout="1000" doc:name="Check if Rule is in database" streaming="true">
                                <db:parameterized-query><![CDATA[select "id" from "pandora_alerts"
where "id" = #[flowVars.collibraRule.id]]]></db:parameterized-query>
                            </db:select>
                            <choice doc:name="Choice">
                                <when expression="#[payload != null]">
                                    <logger message="Updating rule in pandora_alerts table. #[payload]" level="INFO" doc:name="Update rules"/>
                                    <db:update config-ref="Generic_Database_Configuration" doc:name="Update rule">
                                        <db:parameterized-query><![CDATA[UPDATE pandora_alerts 
SET 
last_modified_by = #[flowVars.lastModifiedBy], 
last_modified_on = #[flowVars.lastModificationDate],
name = #[flowVars.collibraRule.name]
WHERE id = #[flowVars.collibraRule.id];]]></db:parameterized-query>
                                    </db:update>
                                </when>
                                <otherwise>
                                    <logger message="Inserting rule in pandora_alerts table. #[payload]" level="INFO" doc:name="Insert rules"/>
                                    <db:insert config-ref="Generic_Database_Configuration" doc:name="Insert Rule">
                                        <db:parameterized-query><![CDATA[INSERT INTO pandora_alerts (id, created_on, created_by, last_modified_on, last_modified_by, name, domain_id, domain_name)
VALUES (#[flowVars.collibraRule.id], #[flowVars.creationDate], #[flowVars.createdBy], #[flowVars.lastModificationDate], #[flowVars.lastModifiedBy], #[flowVars.collibraRule.name], #[flowVars.collibraRule.domain.id], #[flowVars.collibraRule.domain.name])]]></db:parameterized-query>
                                    </db:insert>
                                </otherwise>
                            </choice>
                        </when>
                        <otherwise>
                            <logger message="Something went wrong with the Javascript." level="INFO" doc:name="Logger"/>
                        </otherwise>
                    </choice>
                </foreach>
            </when>
            <otherwise>
                <logger message="Collibra payload not found" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </flow>
           
</mule>
