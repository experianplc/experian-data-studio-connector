<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:collibra-dgc="http://www.mulesoft.org/schema/mule/collibra-dgc" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/collibra-dgc http://www.mulesoft.org/schema/mule/collibra-dgc/current/mule-collibra-dgc.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
    <collibra-dgc:config name="CollibraDGC__Connection_Managament_type_strategy" username="Admin" password="Password123" baseApplicationUrl="https://experian-dev-54.collibra.com" doc:name="CollibraDGC: Connection Managament type strategy"/>
    <db:generic-config name="Generic_Database_Configuration" url="jdbc:postgresql://localhost:5432/postgres?user=postgres&amp;password=postgres" driverClassName="org.postgresql.Driver" doc:name="Generic Database Configuration"/>
    <file:connector name="File" autoDelete="false" streaming="true" validateConnections="true" doc:name="File" outputAppend="true">
    </file:connector>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="8083" doc:name="HTTP Request Configuration" usePersistentConnections="false">
        <http:basic-authentication username="connect_user" password="connect_password" preemptive="true"/>
    </http:request-config>
    <flow name="updateRulesFlow" processingStrategy="synchronous">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="15" timeUnit="SECONDS" />
            <watermark variable="lastValidatedTime" default-expression="1970-01-01 00:00:00" selector="MAX" selector-expression="#[payload[&quot;last_validated&quot;]]"/>
            <db:select config-ref="Generic_Database_Configuration" target="#[payload]" maxRows="10" fetchSize="10" doc:name="Rules Database" streaming="true">
                <db:dynamic-query><![CDATA[select * from "pandora_rules"
order by "last_validated" asc]]></db:dynamic-query>
            </db:select>
        </poll>
        <foreach counterVariableName="ruleIndex" rootMessageVariableName="rules" doc:name="For Each">
            <dw:transform-message doc:name="Transform to JSON Payload">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	 "externalSystemId": "Pandora 5.9.3",
	 "communityName": "MyCommunity",
	 "results": [{
		 "externalEntityId": payload.external_database ++ "." ++ payload.external_schema ++ "." ++ payload.external_table_name ++ "." ++ payload.external_column_name,
		 "name": payload.name,
		 "dataQualityRuleName": ( (payload.description splitBy (".") )[0] ) when (1 <= sizeOf ( payload.description splitBy (".") ) ) otherwise "",
		 "note": payload.function,
		 "dimension":  ( (payload.description splitBy (".") )[1] ) when (2 <= sizeOf (payload.description splitBy (".") ) ) otherwise "",
		 "description": ( (payload.description splitBy (".") )[2] ) when (3 <= sizeOf (payload.description  splitBy (".") ) ) otherwise "",
		 "evaluatedColumns": [{
			 "databaseName": payload.external_database,
			 "schemaName": payload.external_schema,
			 "tableName": payload.external_table_name,
			 "name": payload.external_column_name
	 	 }],
	 "rowsPassed": payload.rows_passed,
	 "rowsFailed": payload.rows_failed,
	 "qualityScore": payload.score,
	 "result": false unless payload.result == "Green" otherwise true,
	 "threshold": 0 unless (payload contains "threshold") otherwise payload.threshold,
	 "customAttributes": [{
		 "typeId": "",
		 "values": [""]
	  }]	
	 }]
 }]]></dw:set-payload>
            </dw:transform-message>
            <set-payload value="#[[&quot;flowId&quot;: &quot;updateRules&quot;, &quot;payload&quot;: payload]]" doc:name="Set Payload"/>
            <http:request config-ref="HTTP_Request_Configuration" path="/collibra.connect.gateway" method="POST" doc:name="HTTP" followRedirects="false" parseResponse="false">
                <http:request-builder>
                    <http:header headerName="Content-Type" value="application/x-www-form-urlencoded"/>

                </http:request-builder>
            </http:request>

            <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        </foreach>
    </flow>
</mule>
