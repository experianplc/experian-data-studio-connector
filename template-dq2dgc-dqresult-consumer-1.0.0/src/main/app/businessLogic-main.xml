<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:collibra-dgc="http://www.mulesoft.org/schema/mule/collibra-dgc" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/collibra-dgc http://www.mulesoft.org/schema/mule/collibra-dgc/current/mule-collibra-dgc.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">
    
    <flow name="main" processingStrategy="synchronous">
        <vm:inbound-endpoint exchange-pattern="request-response" path="updateRules" doc:name="VM"/>

        <flow-ref name="validateAndParse" doc:name="Validate and parse"/>
        <set-variable variableName="projects" value="#[payload.projects]" doc:name="Set 'projects"/>
        <set-variable variableName="results" value="#[payload.results]" doc:name="Set 'results'"/>
        <set-variable variableName="rules" value="#[payload.rules]" doc:name="Copy_of_Set 'rules'"/>
        <set-variable variableName="ruleFamilies" value="#[payload.ruleFamilies]" doc:name="Copy_of_Set 'rulefamilies'"/>
        <set-variable variableName="externalSystemId" value="#[payload.externalSystemId]" doc:name="Set 'externalSystemId'"/>

        <set-variable variableName="communityName" value="#[generateCommunityName(payload.communityName)]" doc:name="Set 'communityName'"/>
        <flow-ref name="synchronizeResults" doc:name="synchronizeResults"/>

        <logger message="=== Synchronization Finished ===" level="INFO" doc:name="Success"/>
        <expression-component doc:name="Set response to 'Success'"><![CDATA[payload = ["status": "200"];
payload.title = "Success";
payload.content = "Synchronization Finished Successfuly"]]></expression-component>
        <catch-exception-strategy doc:name="Catch_Exception_Strategy">
            <expression-component doc:name="Set response to 'Failure'"><![CDATA[payload = ["status": "500"];
payload.title = com.google.common.base.Throwables.getRootCause(exception).getMessage();
payload.content = com.google.common.base.Throwables.getStackTraceAsString(exception);]]></expression-component>
            <logger message="=== Synchronization aborted due to exceptions in the flow ===" level="INFO" doc:name="Failure"/>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="validateAndParse">
        <json:validate-schema schemaLocation="dqresults-schema.json" doc:name="Validate JSON Schema"/>
        <json:json-to-object-transformer returnClass="com.collibra.connect.template.dgcdqresultconsumer.Results" doc:name="JSON to Results"/>

    </sub-flow>
    <sub-flow name="synchronizeResults">
        <enricher target="#[flowVars.withEvaluatedColumns]" doc:name="Enrich with 'withEvaluatedColumns'">
            <scripting:component doc:name="Filter results with evaluated columns">
                <scripting:script engine="Groovy"><![CDATA[payload = flowVars.results.findAll{ !it.evaluatedColumns.isEmpty() };
return payload;]]></scripting:script>
            </scripting:component>
        </enricher>
        <choice doc:name="Any results with evaluated columns? (YES/NO)">
            <when expression="#[!flowVars.withEvaluatedColumns.isEmpty()]">
                <flow-ref name="upsertCommunitiesDomainsAndSchemas" doc:name="Upsert Community Domains and Schemas"/>
                <flow-ref name="upsertTables" doc:name="Upsert Tables"/>
                <flow-ref name="upsertColumns" doc:name="Upsert Columns"/>
            </when>
            <otherwise>
                <logger message="No results with evaluatedColumns" level="INFO" doc:name="No nothing"/>
            </otherwise>
        </choice>
        <set-payload value="#[flowVars.results]" doc:name="Apply 'results'"/>

        <flow-ref name="upsertDomainsAndDQResults" doc:name="Upsert Domain and DQ Results"/>

    </sub-flow>
    <sub-flow name="upsertCommunitiesDomainsAndSchemas">
        <set-payload value="#[flowVars.withEvaluatedColumns]" doc:name="Apply results with evaluatedColumns"/>
        <logger message="Upserting databases and schemas" level="INFO" doc:name="Upserting"/>
        <enricher target="#[flowVars.tableViewConfig]" doc:name="Message Enricher">
            <parse-template location="upsertSchemasAndDomainsAndCommunitiesByName.json" doc:name="Parse config"/>
        </enricher>
        <dw:transform-message metadata:id="30c8a303-df98-4ecc-a830-6a5e9033531d" doc:name="Results 2 Databases CSV">
            <dw:input-payload doc:sample="list_Result_1.dwl" mimeType="application/java"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/csv header=false,separator=",",escape="\\",quote="\""
---
(flatten payload.evaluatedColumns) map ((column , index) -> {
	column_0: generateSchemaName(column),
	column_1: p('dq2dgc_dqresult_consumer.metamodel.asset.database.id'),
	column_2: generateDomainNameForDataCatalogAssets(column),
	column_3: p('dq2dgc_dqresult_consumer.metamodel.domain.data_asset_domain.id'),
	column_4: flowVars.communityName
})

]]></dw:set-payload>
        </dw:transform-message>
        <object-to-string-transformer doc:name="Object to String"/>
        <collibra-dgc:import-c-s-v config-ref="CollibraDGC__Connection_Managament_type_strategy" tableViewConfig="#[flowVars.tableViewConfig]" doc:name="Import Database Domains and Schemas"/>
    </sub-flow>
    <sub-flow name="upsertTables">
        <set-payload value="#[flowVars.withEvaluatedColumns]" doc:name="Apply results with evaluatedColumns"/>
        <logger message="Upserting tables" level="INFO" doc:name="Upserting"/>
        <enricher target="#[flowVars.tableViewConfig]" doc:name="Message Enricher">
            <parse-template location="upsertTablesWithRelationToDatabases.json" doc:name="Parse config"/>
        </enricher>
        <dw:transform-message metadata:id="56d6a305-6c6e-4d3f-8f21-bb6c1dc79adc" doc:name="Result 2 Table CSV">
            <dw:input-payload mimeType="application/java" doc:sample="list_Result_2.dwl"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/csv header=false,separator=",",escape="\\",quote="\""
---
(flatten payload.evaluatedColumns) map ((column , index) -> {
	column_0: generateTableName(column),
	column_1: p('dq2dgc_dqresult_consumer.metamodel.asset.table.id'),
	column_2: generateDomainNameForDataCatalogAssets(column),
	column_3: flowVars.communityName,
	column_4: generateSchemaName(column),
	column_5: generateDomainNameForDataCatalogAssets(column)
})]]></dw:set-payload>
        </dw:transform-message>
        <object-to-string-transformer doc:name="Object to String"/>
        <collibra-dgc:import-c-s-v config-ref="CollibraDGC__Connection_Managament_type_strategy" tableViewConfig="#[flowVars.tableViewConfig]" doc:name="Import Tables"/>
    </sub-flow>
    <sub-flow name="upsertColumns">
        <set-payload value="#[flowVars.withEvaluatedColumns]" doc:name="Apply results with evaluatedColumns"/>
        <logger message="Upserting columns" level="INFO" doc:name="Upserting"/>
        <enricher target="#[flowVars.tableViewConfig]" doc:name="Message Enricher">
            <parse-template location="upsertColumnsWithRelationToTables.json" doc:name="Parse config"/>
        </enricher>
        <dw:transform-message metadata:id="56d6a305-6c6e-4d3f-8f21-bb6c1dc79adc" doc:name="Result 2 Column CSV">
            <dw:input-payload mimeType="application/java" doc:sample="list_Result_3.dwl"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/csv header=false,separator=",",escape="\\",quote="\""
---
(flatten payload.evaluatedColumns) map ((column , index) -> {
	column_0: generateColumnName(column),
	column_1: p('dq2dgc_dqresult_consumer.metamodel.asset.column.id'),
	column_2: generateDomainNameForDataCatalogAssets(column),
	column_3: flowVars.communityName,
	column_4: generateTableName(column),
	column_5: generateDomainNameForDataCatalogAssets(column)
})]]></dw:set-payload>
        </dw:transform-message>
        <object-to-string-transformer doc:name="Object to String"/>
        <collibra-dgc:import-c-s-v config-ref="CollibraDGC__Connection_Managament_type_strategy" tableViewConfig="#[flowVars.tableViewConfig]" doc:name="Import Columns"/>
    </sub-flow>

    <sub-flow name="upsertDomainsAndDQResults">
        <flow-ref name="upsertDomains" doc:name="Upsert Domains"/>
        <logger message="Upserting DQ Results" level="INFO" doc:name="Upserting"/>
        <set-payload value="#[flowVars.results]" doc:name="Apply 'results'"/>
        <dw:transform-message metadata:id="286dcb63-f4ab-4c5c-9e1b-7f623f1ea2f5" doc:name="Results to Data Quality Metric">
            <dw:input-variable mimeType="application/java" variableName="results"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map ((result , index) -> {
	externalId: result.externalEntityId,
	name: result.name,
	defaultDomain: {
		name: generateDomainNameForDataQualityResults(),
		community: {
			name: flowVars.communityName
		}
	},
	"edd0ead3-de97-40b7-8868-3d1ff585319e:TARGET": [{
	 	name: result.dataQualityRule,
	 	id: "00000000-0000-0000-0000-000000007016"
	}] when result.dataQualityRule != null otherwise [],
	
	"00000000-0000-0000-0000-000000000239": [{
		value: result.threshold as :string
	}],
	"00000000-0000-0000-0000-000000000236": [{
		value: result.rowsPassed as :string
	}],
	"00000000-0000-0000-0000-000000000237": [{
		value: result.rowsFailed as :string
	}],
	"00000000-0000-0000-0000-000000000238": [{
		value: calculateResult(result) as :string
	}],
	"00000000-0000-0000-0000-000000000240": [{
		value: result.qualityScore as :string
	}],
	"00000000-0000-0000-0000-000000007018:TARGET": result.evaluatedColumns map ((column, colIndex) -> {
		name: generateColumnName(column),
		domain: {
			name: generateDomainNameForDataCatalogAssets(column),
			community: {
				name: flowVars.communityName
			}
		}
	}) when (sizeOf result.evaluatedColumns) != 0 otherwise [],
	(result.customAttributes map ((key,index) -> 
		'$(key.typeId)' : key.values map {
		value: $
	})
	),
	"63d6a62f-e15b-40cb-b3ee-f6aa01ae05e7:TARGET": [{
		name: result.dimension,
		domain: {
			id: p('dq2dgc_dqresult_consumer.metamodel.community.admin_community.domain.data_quality_dimensions.id')
		}
	}] when result.dimension != null otherwise [],
	
	"${dataQualityRuleToDataQualityMetricId}:TARGET": ([{
		name: "Test Rule",
		domain: {
			name: p('ruleBookAssetsDomainName'),
			domainType: {
				id: p('ruleBookDomainTypeId')
			},
			community: {
				name: flowVars.communityName
			}
		}
	}])
	
}
)]]></dw:set-payload>
        </dw:transform-message>
        <collibra-dgc:upsert-assets config-ref="CollibraDGC__Connection_Managament_type_strategy" assetTypeId="00000000-0000-0000-0000-000000031107" defaultDomainId="definedPerAsset" externalSystemId="#[flowVars.externalSystemId]" doc:name="Upsert DQ Rules with/without relation to the evaluated Column">
            <collibra-dgc:assets ref="#[payload]"/>
        </collibra-dgc:upsert-assets>


    </sub-flow>
     <sub-flow name="upsertDomains">
        <logger message="Upserting domains for DQ Results" level="INFO" doc:name="Upserting"/>
        <enricher target="#[flowVars.tableViewConfig]" doc:name="Message Enricher">
            <parse-template location="upsertDomains.json" doc:name="Parse config"/>
        </enricher>
        <dw:transform-message metadata:id="56d6a305-6c6e-4d3f-8f21-bb6c1dc79adc" doc:name="Result 2 Domain CSV">
            <dw:input-payload mimeType="application/java"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/csv header=false,separator=",",escape="\\",quote="\""
---
payload map ((result , index) -> {
	column_0: generateDomainNameForDataQualityResults(),
	column_1: p('dq2dgc_dqresult_consumer.metamodel.domain.governance_asset_domain.id'),
	column_2: flowVars.communityName
})]]></dw:set-payload>
        </dw:transform-message>
        <object-to-string-transformer doc:name="Object to String"/>
        <collibra-dgc:import-c-s-v config-ref="CollibraDGC__Connection_Managament_type_strategy" tableViewConfig="#[flowVars.tableViewConfig]" doc:name="Import Domains for DQ Rules"/>
        <logger message="DONE WITHOUT ERROR" level="INFO" doc:name="Logger"/>
    </sub-flow>
    <sub-flow name="DGC_Login">
        <enricher target="#[sessionVars.dgcSessionId]" doc:name="Message Enricher">
            <collibra-dgc:login config-ref="CollibraDGC__Connection_Managament_type_strategy" doc:name="CollibraDGC"/>
        </enricher>
        <logger message="logged in with session id: #[sessionVars.dgcSessionId]" level="INFO" doc:name="Logger"/>
    </sub-flow>
    <sub-flow name="upsertDomainsAndDQMetric">
        <flow-ref name="upsertDomains" doc:name="upsertDomains"/>
        <logger message="upserting DQ Metric" level="INFO" doc:name="Upserting"/>
        <set-payload value="#[flowVars.results]" doc:name="Apply 'results'"/>
        <dw:transform-message doc:name="Result 2 Data Quality Metric">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload filter (payload != null and payload != "") map ((result , index) -> {
	externalId: result.externalEntityId,
	name: result.name,
	domain: {
		name: p('ruleBookAssetsDomainName'),
		domainType: {
			id: p('ruleBookDomainTypeId')
		},
		community: {
			name: flowVars.communityName
		}
	},
	"${descriptionAttributeTypeId}": [{
		value: result.description
	}],
	"${rowsFailedAttributeTypeId}": [{
		value: (result.rowsFailed as :string) when (result.rowsFailed != "null" and result.rowsFailed != null ) otherwise ""
	}],
	"${rowsPassesAttributeTypeId}": [{
		value: (result.rowsPassed as :string) when (result.rowsPassed != "null" and result.rowsPassed != null) otherwise ""
	}],
	"${qualityScoreAttributeTypeId}": [{
		value: (result.qualityScore as :string) when (result.qualityScore != "null" and result.qualityScore != null) otherwise ""
	}],
	"${thresholdAttributeTypeId}": [{
		value: p('thresholdAttributeValue')
	}],
	"${resultAttributeTypeId}": [{
		value: ((true) when (p('thresholdAttributeValue') < result.qualityScore) otherwise false) as :string
	}],
	"${dataQualityRuleToDataQualityMetricId}:TARGET": ([{
		name: result.parentName,
		domain: {
			name: p('ruleBookAssetsDomainName'),
			domainType: {
				id: p('ruleBookDomainTypeId')
			},
			community: {
				name: flowVars.communityName
			}
		}
	}]) when (result.parentName != "") otherwise []
}  )  groupBy $.name  ]]></dw:set-payload>
        </dw:transform-message>
        <choice doc:name="Copy_of_Choice">
            <when expression="#[payload.isEmpty()]">
                <logger message="No Metrics To Upsert" level="INFO" doc:name="Copy_of_Logger"/>
            </when>
            <otherwise>
                <set-variable variableName="DQMetric" value="#[payload]" doc:name="Copy_of_payload 2 DQMetric"/>
                <set-variable variableName="flag" value="${upsertBylastDate}" doc:name="Copy_of_flag"/>
                <choice doc:name="Copy_of_Upsert DQ Metric By Latest Execution date?(Yes/No)">
                    <when expression="#[flowVars.flag == &quot;Yes&quot;]">
                        <logger message="Process by last sync date" level="INFO" doc:name="Copy_of_Logger"/>
                        <set-payload value="#[flowVars.DQMetric]" doc:name="Copy_of_Set Payload"/>
                        <json:object-to-json-transformer doc:name="Copy_of_Object to JSON"/>
                        <component class="com.collibra.connect.template.dgcdqresultconsumer.UpsertByLastSyncDate" doc:name="Copy_of_Java"/>
                        <dw:transform-message doc:name="Copy_of_Transform Message">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
                        </dw:transform-message>
                        <logger message="payload before metric upsert: #[payload]" level="INFO" doc:name="Copy_of_Logger"/>
                        <collibra-dgc:upsert-assets-by-name config-ref="CollibraDGC__Connection_Managament_type_strategy" assetTypeId="${dataQualityRuleMetricAttributeTypeId}" doc:name="Copy_of_Upsert DQ Metric">
                            <collibra-dgc:assets ref="#[payload]"/>
                        </collibra-dgc:upsert-assets-by-name>
                    </when>
                    <otherwise>
                        <logger message="process by sort order" level="INFO" doc:name="Copy_of_Logger"/>
                        <set-payload value="#[flowVars.DQMetric]" doc:name="Copy_of_Set Payload"/>
                        <dw:transform-message doc:name="Copy_of_Transform Message">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
flatten payload]]></dw:set-payload>
                        </dw:transform-message>
                        <set-variable variableName="metric" value="#[payload]" doc:name="Copy_of_Metric Payload"/>
                        <foreach collection="#[flowVars.metric]" doc:name="Copy_of_For Each">
                            <set-variable variableName="aMetric" value="#[new java.util.ArrayList()]" doc:name="Copy_of_aMetric"/>
                            <expression-transformer expression="#[flowVars.aMetric.add(payload)]" doc:name="Copy_of_Expression"/>
                            <set-payload value="#[payload]" doc:name="Copy_of_Set Payload"/>
                            <collibra-dgc:upsert-assets-by-name config-ref="CollibraDGC__Connection_Managament_type_strategy" assetTypeId="${dataQualityRuleMetricAttributeTypeId}" doc:name="Copy_of_Upsert DQ Metric">
                                <collibra-dgc:assets ref="#[payload]"/>
                            </collibra-dgc:upsert-assets-by-name>
                        </foreach>
                    </otherwise>
                </choice>
            </otherwise>
        </choice>
    </sub-flow>
    <sub-flow name="Copy_of_upsertDomainsAndDQRules">
        <set-payload value="#[flowVars.withEvaluatedColumns]" doc:name="Apply 'rules'"/>
        <flow-ref name="upsertDomains" doc:name="upsertDomains"/>
        <logger message="Upserting DQ Rule" level="INFO" doc:name="Upserting"/>
        <set-payload value="#[flowVars.withEvaluatedColumns]" doc:name="Copy_of_Apply 'rules'"/>
        <logger message="payload before dq rule transform: #[payload] -- flowVars #[flowVars]" level="INFO" doc:name="Copy_of_Logger"/>
        <dw:transform-message doc:name="Copy_of_Result 2 Data Quality Rule" metadata:id="56d6a305-6c6e-4d3f-8f21-bb6c1dc79adc">
            <dw:input-payload/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map ((result , index) -> {
	externalId: result.externalEntityId,
	name: result.name,
	domain: {
		name: generateDomainNameForDataQualityResults(),
		domainType: {
			id: "${ruleBookDomainTypeId}"
		},
		community: {
			name: flowVars.communityName
		}
	},
	"${descriptionAttributeTypeId}": [{
		value: result.description
	}],
	"${noteAttributeTypeId}": [{
		value: result.note
	}],
	(result.customAttributes map ((key,index) -> 
		'$(key.typeId)' : key.values map {
		value: $
	})	
	)
})]]></dw:set-payload>
        </dw:transform-message>
        <logger message="payload before dq rule upsert: #[payload]" level="INFO" doc:name="Copy_of_Logger"/>
        <collibra-dgc:upsert-assets-by-name config-ref="CollibraDGC__Connection_Managament_type_strategy" assetTypeId="${dataQualityRuleAttributeTypeId}" doc:name="Copy_of_Upsert DQ Rules with/without relation to the evaluated Column">
            <collibra-dgc:assets ref="#[payload]"/>
        </collibra-dgc:upsert-assets-by-name>
    </sub-flow>

</mule>
